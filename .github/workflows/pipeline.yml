name: Build Docker Image, Upload to ECR and Deploy to ECS

on:
  workflow_call:
    inputs:
      ENVIRONMENT:
        type: string
        required: true

jobs:
  build:
    runs-on: ubuntu-latest
    environment: ${{ inputs.ENVIRONMENT }}
    defaults:
      run:
        working-directory: ./  
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set Branch
        id: set-branch
        run: echo "BRANCH=${{ github.ref_name }}" >> $GITHUB_ENV

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Extract Version
        id: version
        run: |
          VERSION=$(sed -nE 's/^\s*"version": "(.*?)",?$/\1/p' release.json)
          if [[ -z "$VERSION" ]]; then
            echo "Error: Could not extract version from release.json"
            exit 1
          fi
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "Image Version: $VERSION"

      - name: Build and Push Docker Image for Main
        if: ${{ env.BRANCH == 'main' }}
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ vars.ECR_REPOSITORY }}
        run: |
          IMAGE_TAG="${VERSION}"
          echo "Final Image Tag: $IMAGE_TAG"
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      - name: Build and Push Docker Image for Dev
        if: ${{ env.BRANCH == 'dev' }}
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ vars.ECR_REPOSITORY }}
        run: |
          TAG_SUFFIX=".dev"
          IMAGE_TAG="${VERSION}${TAG_SUFFIX}"
          echo "Final Image Tag: $IMAGE_TAG"
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

      - name: Push Git Tag
        env:
          TAG_SUFFIX: ${{ env.BRANCH == 'dev' && '.dev' || '' }}
        run: |
          IMAGE_TAG="${VERSION}${TAG_SUFFIX}"
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git tag $IMAGE_TAG
          git push origin $IMAGE_TAG

      - name: Download Task Definition
        if: ${{ env.BRANCH == 'dev' }}
        run: |
          aws ecs describe-task-definition --task-definition test-mf-dev-mf-nginx-task-def --query taskDefinition > task-definition.json
          
      - name: Fill in new Image ID in Task Definition
        if: ${{ env.BRANCH == 'dev' }}
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: test-mf-dev-container
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy Amazon ECS Task Definition
        if: ${{ env.BRANCH == 'dev' }}
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: test-mf-dev-mutual-funds
          cluster: test-dev-cluster
          wait-for-service-stability: true





# name: Build docker image and upload to ECR

# on:
#   workflow_call:
#     inputs:
#       ENVIRONMENT:
#         type: string
#         required: true

# jobs:
#   build:
#     runs-on: ubuntu-latest
#     environment: ${{ inputs.ENVIRONMENT }}
#     defaults:
#       run:
#         working-directory: ./
#     steps:
#       - name: Checkout Code
#         uses: actions/checkout@v4

#       - name: Set Branch
#         id: set-branch
#         run: echo "BRANCH=${{ github.ref_name }}" >> $GITHUB_ENV

#       - name: Configure AWS credentials
#         uses: aws-actions/configure-aws-credentials@v2
#         with:
#           aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
#           aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
#           aws-region: ${{ vars.AWS_REGION }}

#       - name: Login to Amazon ECR
#         id: login-ecr
#         uses: aws-actions/amazon-ecr-login@v1

#       - name: Extract Version
#         id: version
#         run: |
#           VERSION=$(sed -nE 's/^\s*"version": "(.*?)",?$/\1/p' release.json)
#           if [[ -z "$VERSION" ]]; then
#             echo "Error: Could not extract version from release.json"
#             exit 1
#           fi
#           echo "VERSION=$VERSION" >> $GITHUB_ENV
#           echo "Image Version: $VERSION"

#       - name: Build and Push Docker Image
#         if: env.BRANCH == 'dev'
#         env:
#           ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
#           ECR_REPOSITORY: ${{ vars.ECR_REPOSITORY }}
#         run: |
#           TAG_SUFFIX=".dev"
#           IMAGE_TAG="${VERSION}${TAG_SUFFIX}"
#           echo "Final Image Tag: $IMAGE_TAG"
#           docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
#           docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

#       - name: Build and Push Docker Image for Main
#         if: env.BRANCH == 'main'
#         env:
#           ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
#           ECR_REPOSITORY: ${{ vars.ECR_REPOSITORY }}
#         run: |
#           IMAGE_TAG="${VERSION}"
#           echo "Final Image Tag: $IMAGE_TAG"
#           docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
#           docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

#       - name: Push Git Tag
#         env:
#           TAG_SUFFIX: ${{ env.BRANCH == 'dev' && '.dev' || '' }}
#         run: |
#           IMAGE_TAG="${VERSION}${TAG_SUFFIX}"
#           git config user.name "GitHub Actions"
#           git config user.email "actions@github.com"
#           git tag $IMAGE_TAG
#           git push origin $IMAGE_TAG





################     workable code ****** #########################

# name: AWS ECS Deployment

# on:
#   push:
#     branches:
#       - dev
#       - main

# jobs:
#   build-and-push-image:
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout Code
#         uses: actions/checkout@v4

#       - name: Set Branch
#         id: set-branch
#         run: echo "BRANCH=${{ github.ref_name }}" >> $GITHUB_ENV

#       - name: Configure AWS credentials
#         uses: aws-actions/configure-aws-credentials@v2
#         with:
#           aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
#           aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
#           aws-region: ${{ vars.AWS_REGION }}

#       - name: Login to Amazon ECR
#         id: login-ecr
#         uses: aws-actions/amazon-ecr-login@v1

#       - name: Extract Version
#         id: version
#         run: |
#           VERSION=$(sed -nE 's/^\s*"version": "(.*?)",?$/\1/p' release.json)
#           if [[ -z "$VERSION" ]]; then
#             echo "Error: Could not extract version from release.json"
#             exit 1
#           fi
#           echo "VERSION=$VERSION" >> $GITHUB_ENV
#           echo "Image Version: $VERSION"

#       - name: Build and Push Docker Image
#         if: env.BRANCH == 'dev'
#         env:
#           ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
#           ECR_REPOSITORY: ${{ vars.ECR_REPOSITORY }}
#         run: |
#           TAG_SUFFIX=".dev"
#           IMAGE_TAG="${VERSION}${TAG_SUFFIX}"
#           echo "Final Image Tag: $IMAGE_TAG"
#           docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
#           docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

#       - name: Build and Push Docker Image for Main
#         if: env.BRANCH == 'main'
#         env:
#           ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
#           ECR_REPOSITORY: ${{ vars.ECR_REPOSITORY }}
#         run: |
#           IMAGE_TAG="${VERSION}"
#           echo "Final Image Tag: $IMAGE_TAG"
#           docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
#           docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

#       - name: Push Git Tag
#         env:
#           TAG_SUFFIX: ${{ env.BRANCH == 'dev' && '.dev' || '' }}
#         run: |
#           IMAGE_TAG="${VERSION}${TAG_SUFFIX}"
#           git config user.name "GitHub Actions"
#           git config user.email "actions@github.com"
#           git tag $IMAGE_TAG
#           git push origin $IMAGE_TAG


################     workable code ****** #########################


# name: AWS ECS Deployment

# on:
#   push:
#     branches:
#       - dev
#       - main

# jobs:
#   build-and-push-image:
#     runs-on: ubuntu-latest
#     if: github.ref_name == matrix.branch
#     strategy:
#       matrix:
#         branch: [dev, main]
#     steps:
#       - name: Checkout Code
#         uses: actions/checkout@v4

#       - name: Configure AWS credentials
#         uses: aws-actions/configure-aws-credentials@v2
#         with:
#           aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
#           aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
#           aws-region: ${{ vars.AWS_REGION }} # Accessing repository variables

#       - name: Login to Amazon ECR
#         id: login-ecr
#         uses: aws-actions/amazon-ecr-login@v1

#       - name: Extract Version
#         id: version
#         run: |
#           VERSION=$(sed -nE 's/^\s*"version": "(.*?)",?$/\1/p' release.json)
#           if [[ -z "$VERSION" ]]; then
#             echo "Error: Could not extract version from release.json"
#             exit 1
#           fi
#           echo "VERSION=$VERSION" >> $GITHUB_ENV
#           echo "Image Version: $VERSION"

#       - name: Build and Push Docker Image
#         id: build-image
#         if: github.ref_name == matrix.branch
#         env:
#           ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
#           ECR_REPOSITORY: ${{ vars.ECR_REPOSITORY }} # Accessing repository variables
#         run: |
#           TAG_SUFFIX=""
#           if [[ "${{ matrix.branch }}" == "dev" ]]; then
#             TAG_SUFFIX=".dev"
#           fi
#           IMAGE_TAG="${VERSION}${TAG_SUFFIX}"
#           echo "Final Image Tag: $IMAGE_TAG"
#           docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
#           docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

#       - name: Push Git Tag
#         if: github.ref_name == matrix.branch
#         run: |
#           TAG_SUFFIX=""
#           if [[ "${{ matrix.branch }}" == "dev" ]]; then
#             TAG_SUFFIX=".dev"
#           fi
#           IMAGE_TAG="${VERSION}${TAG_SUFFIX}"
#           git config user.name "GitHub Actions"
#           git config user.email "actions@github.com"
#           git tag $IMAGE_TAG
#           git push origin $IMAGE_TAG


















# name: AWS ECS Deployment

# on:
#   push:
#     branches:
#       - dev
#       - main

# env:
#   AWS_REGION: ${{ env.AWS_REGION }}
#   ECR_REPOSITORY: ${{ env.ECR_REPOSITORY }}

# jobs:
#   build-and-push-image:
#     runs-on: ubuntu-latest
#     strategy:
#       matrix:
#         branch: [dev, main]
#     steps:
#       - name: Checkout Code
#         uses: actions/checkout@v4

#       - name: Configure AWS credentials
#         uses: aws-actions/configure-aws-credentials@v2
#         with:
#           aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
#           aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
#           aws-region: ${{ env.AWS_REGION }}

#       - name: Login to Amazon ECR
#         id: login-ecr
#         uses: aws-actions/amazon-ecr-login@v1

#       - name: Extract Version
#         id: version
#         run: |
#           VERSION=$(sed -nE 's/^\s*"version": "(.*?)",?$/\1/p' release.json)
#           if [[ -z "$VERSION" ]]; then
#             echo "Error: Could not extract version from release.json"
#             exit 1
#           fi
#           echo "VERSION=$VERSION" >> $GITHUB_ENV
#           echo "Image Version: $VERSION"


#       - name: Build and Push Docker Image
#         id: build-image
#         if: github.ref_name == matrix.branch
#         env:
#           ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
#         run: |
#           TAG_SUFFIX=""
#           if [[ "${{ matrix.branch }}" == "dev" ]]; then
#             TAG_SUFFIX=".dev"
#           fi
#           IMAGE_TAG="${VERSION}${TAG_SUFFIX}"
#           echo "Final Image Tag: $IMAGE_TAG"
#           docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
#           docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

#       - name: Push Git Tag
#         if: github.ref_name == matrix.branch
#         run: |
#           TAG_SUFFIX=""
#           if [[ "${{ matrix.branch }}" == "dev" ]]; then
#             TAG_SUFFIX=".dev"
#           fi
#           IMAGE_TAG="${VERSION}${TAG_SUFFIX}"
#           git config user.name "GitHub Actions"
#           git config user.email "actions@github.com"
#           git tag $IMAGE_TAG
#           git push origin $IMAGE_TAG























# name: Deploy to Amazon ECS

# on:
#   push:
#     branches:
#       - main

# env:
#   AWS_REGION: MY_AWS_REGION                   # set this to your preferred AWS region, e.g. us-west-1
#   ECR_REPOSITORY: MY_ECR_REPOSITORY           # set this to your Amazon ECR repository name
#   # ECS_SERVICE: MY_ECS_SERVICE                 # set this to your Amazon ECS service name
#   # ECS_CLUSTER: MY_ECS_CLUSTER                 # set this to your Amazon ECS cluster name
#   # ECS_TASK_DEFINITION: MY_ECS_TASK_DEFINITION # set this to the path to your Amazon ECS task definition
#                                                # file, e.g. .aws/task-definition.json
#   # CONTAINER_NAME: MY_CONTAINER_NAME           # set this to the name of the container in the
#                                                # containerDefinitions section of your task definition
#                                             # containerDefinitions section of your task definition

# jobs:
#   deploy:
#     name: Deploy
#     runs-on: ubuntu-latest
#     environment: production

#     steps:
#     - name: Checkout
#       uses: actions/checkout@v2

#     - name: Configure AWS credentials
#       uses: aws-actions/configure-aws-credentials@v1
#       with:
#         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#         aws-region: ${{ env.AWS_REGION }}

#     - name: Extract Version
#       id: version
#       run: |
#         VERSION=$(sed -nE 's/^\s*version = "(.*?)"$/\1/p' release.json)
#         echo "VERSION=$VERSION" >> $GITHUB_ENV
#         echo "Image Version: $VERSION"

#     - name: Login to Amazon ECR
#       id: login-ecr
#       uses: aws-actions/amazon-ecr-login@v1

#     - name: Build, tag, and push image to Amazon ECR
#       id: build-image
#       env:
#         ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
#         IMAGE_TAG: ${{ github.sha }}
#       run: |
#         # Build a docker container and
#         # push it to ECR so that it can
#         # be deployed to ECS.
#         docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
#         docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
#         echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"