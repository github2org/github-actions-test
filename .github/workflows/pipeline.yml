name: AWS ECS Deployment

on:
  push:
    branches:
      - dev
      - master

env:
  AWS_REGION: AWS_REGION
  ECR_REPOSITORY: ECR_REPOSITORY

jobs:
  build-and-push-image:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        branch:
          - dev
          - master
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Extract Version
        id: version
        run: |
          VERSION=$(sed -nE 's/^\s*version = "(.*?)"$/\1/p' release.json)
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "Image Version: $VERSION"

      - name: Build and Push Docker Image
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}      
        run: |
          TAG_SUFFIX=""
          if [ "${{ matrix.branch }}" == "dev" ]; then
            TAG_SUFFIX=".dev"
          fi
          IMAGE_TAG=${VERSION}${TAG_SUFFIX}
          docker build -t $ECR_ACCOUNT_URL/${{ secrets.REPO_NAME }}:latest${TAG_SUFFIX} .
          docker tag $ECR_ACCOUNT_URL/${{ secrets.REPO_NAME }}:latest${TAG_SUFFIX} $ECR_ACCOUNT_URL/${{ secrets.REPO_NAME }}:$IMAGE_TAG
          docker push $ECR_ACCOUNT_URL/${{ secrets.REPO_NAME }}:$IMAGE_TAG

      - name: Push Git Tag
        if: github.ref == 'refs/heads/dev' || github.ref == 'refs/heads/master'
        run: |
          TAG_SUFFIX=""
          if [ "${{ matrix.branch }}" == "dev" ]; then
            TAG_SUFFIX=".dev"
          fi
          IMAGE_TAG=${VERSION}${TAG_SUFFIX}
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git tag $IMAGE_TAG
          git push origin $IMAGE_TAG























# name: Deploy to Amazon ECS

# on:
#   push:
#     branches:
#       - main

# env:
#   AWS_REGION: MY_AWS_REGION                   # set this to your preferred AWS region, e.g. us-west-1
#   ECR_REPOSITORY: MY_ECR_REPOSITORY           # set this to your Amazon ECR repository name
#   # ECS_SERVICE: MY_ECS_SERVICE                 # set this to your Amazon ECS service name
#   # ECS_CLUSTER: MY_ECS_CLUSTER                 # set this to your Amazon ECS cluster name
#   # ECS_TASK_DEFINITION: MY_ECS_TASK_DEFINITION # set this to the path to your Amazon ECS task definition
#                                                # file, e.g. .aws/task-definition.json
#   # CONTAINER_NAME: MY_CONTAINER_NAME           # set this to the name of the container in the
#                                                # containerDefinitions section of your task definition
#                                             # containerDefinitions section of your task definition

# jobs:
#   deploy:
#     name: Deploy
#     runs-on: ubuntu-latest
#     environment: production

#     steps:
#     - name: Checkout
#       uses: actions/checkout@v2

#     - name: Configure AWS credentials
#       uses: aws-actions/configure-aws-credentials@v1
#       with:
#         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#         aws-region: ${{ env.AWS_REGION }}

#     - name: Extract Version
#       id: version
#       run: |
#         VERSION=$(sed -nE 's/^\s*version = "(.*?)"$/\1/p' release.json)
#         echo "VERSION=$VERSION" >> $GITHUB_ENV
#         echo "Image Version: $VERSION"

#     - name: Login to Amazon ECR
#       id: login-ecr
#       uses: aws-actions/amazon-ecr-login@v1

#     - name: Build, tag, and push image to Amazon ECR
#       id: build-image
#       env:
#         ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
#         IMAGE_TAG: ${{ github.sha }}
#       run: |
#         # Build a docker container and
#         # push it to ECR so that it can
#         # be deployed to ECS.
#         docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
#         docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
#         echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"